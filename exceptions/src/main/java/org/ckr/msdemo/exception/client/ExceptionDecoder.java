package org.ckr.msdemo.exception.client;

import feign.Response;
import feign.codec.ErrorDecoder;
import org.ckr.msdemo.exception.ReThrownApplicationException;
import org.ckr.msdemo.exception.ReThrownSystemException;
import org.ckr.msdemo.exception.SystemException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.json.JacksonJsonParser;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Created by Administrator on 2017/8/12.
 */
public class ExceptionDecoder implements ErrorDecoder {

    private static final Logger LOG = LoggerFactory.getLogger(ExceptionDecoder.class);

    private JacksonJsonParser jsonParser = new JacksonJsonParser();

    /**
     * Decode custom error response and throw custom exception with methodKey, exceptionId and error message.
     *
     * @param methodKey methodKey
     * @param response  response
     * @return Exception
     */
    @Override
    public Exception decode(String methodKey, Response response) {

        LOG.debug("decode error for method key {}", methodKey);

        Map<String, Object> parsedObj = jsonParser.parseMap(readJsonFromBody(response.body()));

        String exceptionId = (String) parsedObj.get("exceptionId");

        List<Map<String, String>> messageList = (List<Map<String, String>>) parsedObj.get("messageList");

        if (messageList == null || messageList.isEmpty()) {
            return new ReThrownSystemException("Rethrown system exception generated by decoder."
                + "Method key is " + methodKey,
                exceptionId);
        }

        List<String> msgCodeList = new ArrayList<>();
        List<String> msgList = new ArrayList<>();

        ReThrownApplicationException appExp = new ReThrownApplicationException("Rethrown application exception "
            + "generated by decoder. "
            + "Method key is " + methodKey,
            exceptionId);

        for (Map<String, String> message : messageList) {
            appExp.addMessage(message.get("messageCode"), message.get("message"));
        }

        return appExp;
    }

    private String readJsonFromBody(Response.Body body) {

        final char[] buffer = new char[1024];
        final StringBuilder out = new StringBuilder();

        try {

            Reader in = new InputStreamReader(body.asInputStream(), "UTF-8");

            while (true) {
                int rsz = in.read(buffer, 0, buffer.length);

                if (rsz < 0) {
                    break;
                }

                out.append(buffer, 0, rsz);
            }
        } catch (IOException ioException) {
            throw new SystemException(ioException);
        }
        return out.toString();

    }
}
